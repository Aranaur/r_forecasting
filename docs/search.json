[{"path":"index.html","id":"основи-прогнозування-в-r","chapter":"Основи прогнозування в R","heading":"Основи прогнозування в R","text":"","code":""},{"path":"index.html","id":"передмова","chapter":"Основи прогнозування в R","heading":"Передмова","text":"Наразі підручник в процесі розробки.Якщо ви помітили неточності або помилки, будь-ласка напишіть мені: ihor.miroshnychenko@kneu.ua","code":""},{"path":"introR.html","id":"introR","chapter":" 1 Вступ до R","heading":" 1 Вступ до R","text":"Мова програмування R — потужний інструмент, що широко використовується в різних сферах: статистика, візуалізація, наука про дані, машинне навчання, глибоке навчання тощо. Це безкоштовна система з відкритим кодом, з широкими можливостями, які досягаються за рахунок різноманіття пакетів (packages) доповнень.\nR повністю безкоштовний та доступний для встановлення на більшість операційних систем. Крім того, є можливість працювати у хмарних додатках.\nВ той же час, R ідеально підходить для проведення економетричних досліджень.\nВивчити R не складно і цей розділ підготовить Вас до базових операцій.","code":""},{"path":"introR.html","id":"встановлення-r","chapter":" 1 Вступ до R","heading":"1.1 Встановлення R","text":"Варіантів роботи з мовою програмування R існує досить багато. Розберемо основні.","code":""},{"path":"introR.html","id":"встановлення-на-компютер.","chapter":" 1 Вступ до R","heading":"1.1.1 Встановлення на комп’ютер.","text":"Для початку необхідно встановити саму мову програмування під свою операційну систему:WindowsMacOSLinuxДля роботи в R, також слід встановити інтегроване середовище розробки (IDE) RStudio, що значно підвищує зручність, швидкість та ефективність роботи.Щоб встановити RStudio, завантажте останню версію інсталятора для Вашої операційної системи з сайту https://rstudio.com/products/rstudio/download/","code":""},{"path":"introR.html","id":"використання-хмарних-сервісів","chapter":" 1 Вступ до R","heading":"1.1.2 Використання хмарних сервісів","text":"У випадках, коли не має можливості або бажання щось додатково встановлювати на ПК є декілька хмарних сервісів:RStudio CloudGoogle Colab","code":""},{"path":"introR.html","id":"rstudio","chapter":" 1 Вступ до R","heading":"1.2 RStudio","text":"Я пропоную використовувати саме RStudio, оскільки це найзручніший інструмент для роботи з даними.\nПри чому в ній можна працювати з різними мовами програмування, в тому числі й Python.Якщо ваша операційна система — Windows, то після встановлення R та RStudio, на робочому столі у вас буде дві іконки:Перша відноситься до самої мови програмування і не буде використовуватись в роботі, друга відноситься до RStudio і саме вона нам потрібна.\nРисунок 1.1: Базовий інтерфейс RStudio\nЯк правило код пишуть у скрипті (такий собі аналог текстового редактора), тож для його створення необхідно натиснути зелений хрестик в лівому верхньому куті та обрати пункт R Script або натиснути комбінацію клавіш Ctrl+Shift+N:\nРисунок 1.2: Створення скрипта в RStudio\nПісля чого, з’явиться додаткове вікно скрипту, де можна писати код, зберігати його та повертатися до нього за потреби.\nРисунок 1.3: Інтерфейс RStudio\n1. СКРИПТ — відбувається основна робота з кодом.2. КОНСОЛЬ — повертаються результати виконання скриптів. Хоча тут так само писати код, проте він не буде збережений.3. РОБОЧИЙ ПРОСТІР — тут зберігаються змінні, завантажені датасети та побудовані моделі. Крім того є окреме вкладинка історії останніх команд.4. ГРАФІКИ та ФАЙЛИ — тут в окремих закладинках відображаються графіки, є невеличкий файловий менеджер, менеджер пакетів (про них трошки пізніше) та довідка по функціям (сюди будемо звертатися досить часто).","code":""},{"path":"introR.html","id":"базові-операції","chapter":" 1 Вступ до R","heading":"1.3 Базові операції","text":"R - мова програмування з широкими можливостями. З її допомогою можна будувати математичні моделі, проводити статистичні тести, візуалізовувати дані тощо. Але почнемо з чогось максимально простого, наприклад, арифметики.","code":""},{"path":"introR.html","id":"r-та-арифметика","chapter":" 1 Вступ до R","heading":"1.3.1 R та арифметика","text":"Вже з “коробки,” без додаткових пакетів, R надає можливість проводити арифметичні розрахунки. Всі ці операції виконуються за допомогою типових операторів, до яких ми звикли ще з часів навчання в школі або викорситання Excel.Так, додавання додавання двох чисел використовується оператор +:Для віднімання — оператор -:Множення через оператор *:Ділення — /:Піднесення до степеню через ^:Як бачимо, нічого складного. Давайте розглянемо, ще два оператори.Залишок від ділення — %%:Цілочисельне ділення — %/%:Узагальнений перелік арифметичних операторів я помістив у наступну таблицю.","code":"\n2 + 2\n## [1] 4\n5 - 2\n## [1] 3\n3 * 5\n## [1] 15\n25 / 5\n## [1] 5\n3 ^ 3 \n## [1] 27\n5 %% 3\n## [1] 2\n17 %/% 5\n## [1] 3"},{"path":"introR.html","id":"коментарі-до-коду","chapter":" 1 Вступ до R","heading":"1.3.2 Коментарі до коду","text":"Важливою складовою написання коду, окрім його зрозумілості та лаконічності, є коментарі, які допомагають оріентуватися, що відбувається в даному шматку коду.Для додавання коментарів використовується знак ришітки або, як його ще називають, діез — #. Все, що написано у рядку після # ігнорується R:Якщо необхідно “закоментувати” частину коду, тобто поставити # на початку кожного рядка, то для цього є комбінація клавіш Ctrl + Shift + C.","code":"\n# look at this awesome code\n2 + 2 - 3 + 1\n## [1] 2"},{"path":"introR.html","id":"пріоритети-розрахунків","chapter":" 1 Вступ до R","heading":"1.3.3 Пріоритети розрахунків","text":"Після знайомства з арифметикою в R постає логічне питання з приводу пріоритетів операторів. На справді тут все просто, пріоритети працюють як в математиці. Тож не забувайте правильно розставляти дужки.","code":"\n2 + 3 * 4\n## [1] 14\n\n(2 + 3) * 4\n## [1] 20"},{"path":"introR.html","id":"готові-функції","chapter":" 1 Вступ до R","heading":"1.3.4 Готові функції","text":"Крім звичайних арифметичних операторів в мові програмування R одразу вбудовано багато різноманітних функцій, в тому числі й математичних.Для розрахунку кореня квадратного з числа використовується функція sqrt(), яка може бути вам знайома, якщо ви користувалися англомовною версією Excel.Мова програмування R чутлива до регістру, тож варіанти Sqrt(9), SQRT(9) працювати не будуть.Разом з тим, в середині функції можна проводити математичні розрахунки:Функція abs() розраховує абсолютне значення:Розрахунок натурального логарифму через функцію log():Але це ще не все, оскільки для логарифму притаманно мати основу, то в таких випадках слід додати в середині дужок додатковий аргумент base =:Аргументи функцій можна змінювати місцями:Доречі не обов’язково писати назви аргументів функцій. Якщо ви впевнені в їх порядку запис може виглядати наступним чином:Взагалі використання функцій — важлива особливість мови програмування R. Ми можемо створювати власні функції, використовувати функції як аргументи інших функцій тощо.","code":"\n9^0.5\n## [1] 3\n\n9^(1/2)\n## [1] 3\n\nsqrt(9)\n## [1] 3\nsqrt((2 + 3) * 4)\n## [1] 4.472136\nabs(3 - 5)\n## [1] 2\nlog(15)\n## [1] 2.70805\nlog(x = 10, base = 3)\n## [1] 2.095903\nlog(base = 3, x = 10)\n## [1] 2.095903\nlog(10, 3)\n## [1] 2.095903"},{"path":"introR.html","id":"вбудована-документація","chapter":" 1 Вступ до R","heading":"1.3.5 Вбудована документація","text":"Вже на цьому етапі може виникнути ряд питань:де знайти опис функції?які існують аргументи функцій?чи є якісь приклади використання функцій?Відповідь досить проста — всі функції супроводжуються детальною документацією. Для її виклику можна скористуватися функцією help(), де в середині дужок вказати назву функції:Інший варіант — це написати в консолі знак питання і після цього назву функції:Але на мою думку, найшвидший варіант — це написати функцію і натиснути клавішу F1 на клавіатурі.Всі зазначені варіанти приведуть вас до вікна документації у правому нижньому куті RStudio:","code":"\nhelp(abs)\n?abs()"},{"path":"introR.html","id":"створення-змінних","chapter":" 1 Вступ до R","heading":"1.3.6 Створення змінних","text":"Ще один важливий пункт у багатьох мовах програмування — можливість зберігати значення у змінних.В R це робиться за допомогою символів <-. Для швидкого написання існує зручна комбінація клавіш Alt + -.Ліворуч від символу <- записується назва майбутньої змінної. Праворуч — значення або вираз, яке необхідно зберегти в цю змінну.Для присоювання можна використовувати і знак = але серед спільноти користувачів R це не прийнято.Слід звернути увагу, що при присвоюванні результат розрахунку не виводиться в консоль. Якщо ж хочеться переглянути результат слід використати функцію print() або просто звернутися до створеної змінної:","code":"\nx <- 2\ny <- 4\nz <- sqrt(x^2 + y^3)\nprint(z)\n## [1] 8.246211\n\nz\n## [1] 8.246211"},{"path":"introR.html","id":"оператори-порівняння","chapter":" 1 Вступ до R","heading":"1.3.7 Оператори порівняння","text":"В процесі роботи з даними, досить часто працюємо з задачами порівняння. Для вирішення таких питань в мові програмування R є зручні та зрозумілі оператори:Окремо зауважу, що для порівняння двох змінних використовується оператор з подвійним знаком дорівнює ==, а не з одним =. Це досить популярна помилка.","code":""},{"path":"introR.html","id":"типи-даних","chapter":" 1 Вступ до R","heading":"1.4 Типи даних","text":"Інформація зберігається в різних типах даних. Це може бути число, текст, булева змінна тощо.Один з найпопулярніших варіантів збереження даних — це числовий формат. В мові програмування R для нього є окремий клас — numeric. При цьому існує три типи numeric:Цілі - integer.Дробові - double.Комплексні - complex.В більшості випадків R буде сам конвертувати числа в потрібний формат. Але якщо необхідно задати конкретний тип числа, то можна використати функції .integer(), .double() та .complex().В мові програмування R досить багато функцій, які починаються на ., які переводять об’єкт до конкретного класу. Іншими словами просить читати дані в середені дужок у відповідному форматі.Для створення цілочислового значення можна в кінці поставити символ L, щоб примусово оголосити число як integer:Функції, що починаються на . перевіряють, чи належить об’єкт до обраного класу.Для роботи з текстовими даними є клас character. Вони записуються в лапках, при цьому можна використовувати як подвійні \" так і одинарні '.Логічні (logical) данні - це тип даних які приймають лише значення TRUE або FALSE. Ми з ними вже зустрічалися коли використовували оператори порівняння.Для перевірки типу даних використовується функція class():","code":"\nis.integer(10)\n## [1] FALSE\n\nis.integer(10L)\n## [1] TRUE\nis.character(\"Ash nazg durbatulûk, ash nazg gimbatul,\n             ash nazg thrakatulûk, agh burzum-ishi krimpatul.\")\n## [1] TRUE\nclass(5)\n## [1] \"numeric\""},{"path":"introR.html","id":"структури-даних","chapter":" 1 Вступ до R","heading":"1.5 Структури даних","text":"\nРисунок 1.4: Структури даних R\n","code":""},{"path":"introR.html","id":"вектор","chapter":" 1 Вступ до R","heading":"1.5.1 Вектор","text":"Почнемо з найпростішого. Вектор - це одновимірна послідовність елементів одного типу. Для створення вектору використовується функція c().Для створення послідовностей з кроком 1 зручно використовувати оператор :Для більш складних послідовностей є вбудована функція seq() (не забувайте дивитися довідку по функціям)Крім того можна задати не лише крок послідовності (аргумент =), а й довжину (аргумент length.=)Інша корисна функція rep() дозволяє створити вектор з повторюваними значеннями. Перший аргумент - значення яке слід повторювати, другий аргумент - скільки разів повторювати.При цьому і перший і другий аргумент може бути вектором:Крім того можна об’єднувати вектори:В означенні вектора в мові програмування R сказано, що всі елементи вектори мають бути одного типу. Одразу хочеться перевірити, що буде, якщо ця умова не буде виконуватись. В більшості мов програмування ми б отримали помилку. Мова програмування R, при неспівпадінні типів, буде зводити все до “спільного знаменника,” тобто конвертувати дані за певними правилами - приведення типів (coercion).Видиділють два типи:неявне приведення типів (implicit coercion), коли все відбувається автоматично за вбудованими правилами.явне приведення типів (explicit coercion), коли ми самі вирішуємо до якого типу перевести дані, якщо це можливо.Приклад неявного приведення типів:TRUE перетворився в 1, а FALSE в 0.\nВ даному випадку всі дані приведено до текстовиого типу:В R є своя іерархія типів:\nNULL < raw < logical < integer < double < complex < character < list < expressionДля явного приведення типів даних використовуєтсья сімейство функцій, що починається на .:","code":"\nc(2, 4, 8, -2, -6, 0)\n## [1]  2  4  8 -2 -6  0\n\nc(\"два\", \"чотири\", \"шість\")\n## [1] \"два\"    \"чотири\" \"шість\"\n\nc(TRUE, TRUE, FALSE)\n## [1]  TRUE  TRUE FALSE\n-5:5\n##  [1] -5 -4 -3 -2 -1  0  1  2  3  4  5\n\n3:-2\n## [1]  3  2  1  0 -1 -2\nseq(1, 10, by = 2)\n## [1] 1 3 5 7 9\nseq(1, 10, length.out = 3)\n## [1]  1.0  5.5 10.0\nrep(3, 5)\n## [1] 3 3 3 3 3\nrep(1:3, 5)\n##  [1] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n\nrep(1:3, 1:3)\n## [1] 1 2 2 3 3 3\nv1 <- c(\"Say\", \"friend\")\n\nv2 <- c(\"and\", \"enter\")\n\nc(v1, v2)\n## [1] \"Say\"    \"friend\" \"and\"    \"enter\"\nc(TRUE, 2, FALSE)\n## [1] 1 2 0\n\n3 - TRUE\n## [1] 2\nc(TRUE, 2, \"Hello\")\n## [1] \"TRUE\"  \"2\"     \"Hello\"\nas.numeric(c(TRUE, 2, FALSE, FALSE))\n## [1] 1 2 0 0\n\nas.character(c(TRUE, 2, FALSE, FALSE))\n## [1] \"1\" \"2\" \"0\" \"0\""},{"path":"introR.html","id":"операції-з-векторами","chapter":" 1 Вступ до R","heading":"1.5.1.1 Операції з векторами","text":"Всі арифметичні операції, що ми розглядали раніше, можна використовувати і до векторів однакової довжини:","code":"\nq <- 1:5\n\nw <- 2:6\n\nq + w\n## [1]  3  5  7  9 11\n\nq - w\n## [1] -1 -1 -1 -1 -1\n\nq * w\n## [1]  2  6 12 20 30\n\nq / w\n## [1] 0.5000000 0.6666667 0.7500000 0.8000000 0.8333333\n\nw ^ q + q - w * q\n## [1]    1    5   55  609 7751\n\nsqrt(q)\n## [1] 1.000000 1.414214 1.732051 2.000000 2.236068"},{"path":"introR.html","id":"правило-переписування","chapter":" 1 Вступ до R","heading":"1.5.1.2 Правило переписування","text":"Якщо вектори не однакової довжини і ми хочемо провести з ними певні операції, то в такому випадку спрацює правило переписування (recycling rule): якщо коротший вектор кратний довжині довшого, короткий буде повторюватися необхідну кількість разів.Операції з вектором та окремим значенням можна вважати окремим випадком ресайклінга: окреме значення буде повторюватися необхідну кількість разів:Якщо коротший вектор не кратний довшому (наприклад, перший довжиною 2, а інший - 3), то R все одно порахує результат, але видасть попередження:","code":"\nq <- 1:2\nw <- 1:4\nq * w\n## [1] 1 4 3 8\nw * 2\n## [1] 2 4 6 8\nq + c(1, 5, 7)\n## Warning in q + c(1, 5, 7): longer object length is not a multiple of shorter\n## object length\n## [1] 2 7 8"},{"path":"introR.html","id":"індексація-векторів","chapter":" 1 Вступ до R","heading":"1.5.1.3 Індексація векторів","text":"Індексація - задача вибору окремого елемента структури даних. Для цього використовуються квадратні дужки [].Найпростіший варіант індексація по номеру, тобто порядкове значення елемента:Важливий факт - індексація в мові програмування R починається з 1.За допомогою індексації можна не лише звертатися до окремого елементу, а й заміняти його значення:Можна використовувати цілі вектори для індексації:Індексація зі знаком мінус видасть всі значення вектора крім обраних:","code":"\ne <- c(-5:-3, 2, 7, -6, 4:2)\ne[1]\n## [1] -5\n\ne[5]\n## [1] 7\ne[5] <- 15\ne[2:5]\n## [1] -4 -3  2 15\n\ne[6:1]\n## [1] -6 15  2 -3 -4 -5\ne[-1]\n## [1] -4 -3  2 15 -6  4  3  2\n\ne[c(-1, -5)]\n## [1] -4 -3  2 -6  4  3  2"},{"path":"introR.html","id":"матриці","chapter":" 1 Вступ до R","heading":"1.5.2 Матриці","text":"Матриця (matrix) — це двовимірний масив даних, в якому кожен елемент має однаковий тип (числовий, текстовий, логічний). Іншими словами, матриця - це двовимірний вектор, у якого є довжина та ширина.Створення матриці відбувається за допомогою функції matrix(), в якій слід вказати кількість рядків та ствопчиків:За замовчуванням значення матриці заповнюються по стовпчикам. Але це можна змітини за допомогою арументу byrow = TRUEОскільки матриця — це двовимірний масив, то для індексації використовуються два індекси, що розділені комою: перший відповідає за рядок, другий за стовпчик.Якщо один з індексів залишити пустим — отримаємо всі значення рядка/стовпчика в залежності від того, який індекс ми не вказуємо.Аналогічно до вектора, за допомогою індексації можна переписувати частину матриці:","code":"\nmatrix(1:16, nrow = 4, ncol = 4)\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    5    9   13\n## [2,]    2    6   10   14\n## [3,]    3    7   11   15\n## [4,]    4    8   12   16\nmatrix(1:16, nrow = 4, ncol = 4, byrow = TRUE)\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    2    3    4\n## [2,]    5    6    7    8\n## [3,]    9   10   11   12\n## [4,]   13   14   15   16\nmy_matrix <- matrix(1:16, nrow = 4, ncol = 4)\nmy_matrix\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    5    9   13\n## [2,]    2    6   10   14\n## [3,]    3    7   11   15\n## [4,]    4    8   12   16\n\nmy_matrix[2, 3]\n## [1] 10\n\nmy_matrix[1:2, 3:4]\n##      [,1] [,2]\n## [1,]    9   13\n## [2,]   10   14\nmy_matrix[, 1:2]\n##      [,1] [,2]\n## [1,]    1    5\n## [2,]    2    6\n## [3,]    3    7\n## [4,]    4    8\n\nmy_matrix[1:2, ]\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    5    9   13\n## [2,]    2    6   10   14\nmy_matrix[1:2, 3:4] <- 0\nmy_matrix\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    5    0    0\n## [2,]    2    6    0    0\n## [3,]    3    7   11   15\n## [4,]    4    8   12   16"},{"path":"introR.html","id":"масиви","chapter":" 1 Вступ до R","heading":"1.5.3 Масиви","text":"Масиви даних (array) — схожі на матриці, але мають більше двох вимирів. Створюються вони за допомогою функції array(), де слід вказати вектор, з якого буде створено масив, і його розмірність:","code":"\nmy_array <- array(1:16, c(4, 2, 2))\nmy_array\n## , , 1\n## \n##      [,1] [,2]\n## [1,]    1    5\n## [2,]    2    6\n## [3,]    3    7\n## [4,]    4    8\n## \n## , , 2\n## \n##      [,1] [,2]\n## [1,]    9   13\n## [2,]   10   14\n## [3,]   11   15\n## [4,]   12   16"},{"path":"introR.html","id":"списки","chapter":" 1 Вступ до R","heading":"1.5.4 Списки","text":"Списки — це впорядкований набір об’єктів. Я представляю собі списки, як блокнот, в якому на кожній сторінці зберігається інформація у певному форматі. Вони можуть зберігати різні дані, в тому числі вектори, матриці, дата фрейми й інші списки.Списки створюються за допомогою функції list():В даному випадку vec, gendalf та my_matrix — назви елементів списку.Для звернення до елементів списку можна використовувати індекси або імена (через символ $). При зверненні через індекс необхідно використовувати подвійні квадратні дужки, наприклад:Списки досить часто використовуються в R, наприклад результати побудови математичних моделей, статистичних тестів зберігаються у вигляді списків. тож важливо вміти з ними працювати.","code":"\nmy_list <- list(vec = c(1:5),\n                gendalf = \"You shall not pass\",\n                my_matrix = matrix(1:4, ncol = 2))\nmy_list\n## $vec\n## [1] 1 2 3 4 5\n## \n## $gendalf\n## [1] \"You shall not pass\"\n## \n## $my_matrix\n##      [,1] [,2]\n## [1,]    1    3\n## [2,]    2    4\nmy_list[[2]]\n## [1] \"You shall not pass\"\n\nmy_list$gendalf\n## [1] \"You shall not pass\"\n\nmy_list[['gendalf']]\n## [1] \"You shall not pass\""},{"path":"introR.html","id":"дата-фрейми","chapter":" 1 Вступ до R","heading":"1.5.5 Дата фрейми","text":"Нарешті ми перейшли до найголовнішого - дата фрейми (data frames). Саме з такою структурою даних працюють найчастіше. Головною особливістю їх є те, що різні стовпчики можуть містити різний тип даних (але їх довжина має бути однаковою).\nДля створення дата фрейму використовується функція data.frame().Переглянути структуру дата фрейму можна за допомогою функції str():В нашому випадку перший та другий стовпчик - текстові, третя - числова, четверта - логічна.Преглянути назви ствопців або надати їм нову назву можна за допомогою функції names().Індексація аналогічно до матриці та списків можлива через [] та знак $.Для перегляду дата фрейму в RStudio використовується функція View() або можна просто натиснути на назву змінної у розділі Environment. Ви побачите таблицю, дещо схожу на Excel або Google Spreadsheets.","code":"\nmy_df <- data.frame(name = c(\"Frodo\", \"Eowyn\", \"Legolas\", \"Galadriel\"),\n                    sex = c(\"male\", \"female\", \"male\", \"female\"),\n                    age = c(51, 24, 2931, 2700),\n                    one_ring = c(TRUE, FALSE, FALSE, FALSE))\nmy_df\nstr(my_df)\n## 'data.frame':    4 obs. of  4 variables:\n##  $ name    : chr  \"Frodo\" \"Eowyn\" \"Legolas\" \"Galadriel\"\n##  $ sex     : chr  \"male\" \"female\" \"male\" \"female\"\n##  $ age     : num  51 24 2931 2700\n##  $ one_ring: logi  TRUE FALSE FALSE FALSE\nnames(my_df)\n## [1] \"name\"     \"sex\"      \"age\"      \"one_ring\"\nmy_df$name\n## [1] \"Frodo\"     \"Eowyn\"     \"Legolas\"   \"Galadriel\"\n\nmy_df$name[2:3]\n## [1] \"Eowyn\"   \"Legolas\"\n\nmy_df[2,3]\n## [1] 24\n\nmy_df[2:3, \"name\"]\n## [1] \"Eowyn\"   \"Legolas\""},{"path":"introR.html","id":"пакети-в-r","chapter":" 1 Вступ до R","heading":"1.6 Пакети в R","text":"","code":""},{"path":"introR.html","id":"імпорт-та-експорт-даних","chapter":" 1 Вступ до R","heading":"1.7 Імпорт та експорт даних","text":"","code":""},{"path":"introR.html","id":"умовні-конструкції","chapter":" 1 Вступ до R","heading":"1.8 Умовні конструкції","text":"","code":""},{"path":"introR.html","id":"створення-функцій-в-r","chapter":" 1 Вступ до R","heading":"1.9 Створення функцій в R","text":"","code":""},{"path":"introR.html","id":"вступ-у-tidyverse","chapter":" 1 Вступ до R","heading":"1.10 Вступ у Tidyverse","text":"","code":""},{"path":"introR.html","id":"створення-звітів-r-markdown","chapter":" 1 Вступ до R","heading":"1.11 Створення звітів: R Markdown","text":"","code":""},{"path":"graphics.html","id":"graphics","chapter":" 2 Візуалізація часових рядів","heading":" 2 Візуалізація часових рядів","text":"text","code":""},{"path":"decomposition.html","id":"decomposition","chapter":" 3 Декомпозиція часових рядів","heading":" 3 Декомпозиція часових рядів","text":"text","code":""},{"path":"features.html","id":"features","chapter":" 4 Аналіз часового ряду","heading":" 4 Аналіз часового ряду","text":"text","code":""},{"path":"toolbox.html","id":"toolbox","chapter":" 5 Інструментарій прогнозування","heading":" 5 Інструментарій прогнозування","text":"text","code":""},{"path":"regression.html","id":"regression","chapter":" 6 Регресійні моделі","heading":" 6 Регресійні моделі","text":"text","code":""},{"path":"expsmooth.html","id":"expsmooth","chapter":" 7 Експоненціальне згладжування","heading":" 7 Експоненціальне згладжування","text":"text","code":""},{"path":"arima.html","id":"arima","chapter":" 8 ARIMA-моделі","heading":" 8 ARIMA-моделі","text":"text","code":""},{"path":"prophet.html","id":"prophet","chapter":" 9 Prophet Facebook","heading":" 9 Prophet Facebook","text":"text","code":""},{"path":"clustering.html","id":"clustering","chapter":" 10 Кластеризація","heading":" 10 Кластеризація","text":"text","code":""},{"path":"references.html","id":"references","chapter":"Література","heading":"Література","text":"text","code":""}]
