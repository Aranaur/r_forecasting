[{"path":"index.html","id":"основи-прогнозування-в-r","chapter":"Основи прогнозування в R","heading":"Основи прогнозування в R","text":"Ігор Мірошниченко2021-09-19","code":""},{"path":"index.html","id":"передмова","chapter":"Основи прогнозування в R","heading":"Передмова","text":"Наразі підручник в процесі розробки.Якщо ви помітили неточності або помилки, будь-ласка напишіть мені: ihor.miroshnychenko@kneu.ua","code":""},{"path":"intro_r.html","id":"intro_r","chapter":" 1 Вступ до R","heading":" 1 Вступ до R","text":"Мова програмування R — потужний інструмент, що широко використовується в різних сферах: статистика, візуалізація, наука про дані, машинне навчання, глибоке навчання тощо. Це безплатна система з відкритим кодом, з широкими можливостями, які досягаються внаслідок різноманіття пакетів (packages) доповнень.\nR повністю безплатний та доступний для встановлення на більшість операційних систем. Крім того, є можливість працювати у хмарних додатках.\nРазом з тим, R ідеально підходить для проведення економетричних досліджень.\nВивчити R не складно і цей розділ підготовить Вас до базових операцій.","code":""},{"path":"intro_r.html","id":"install_r","chapter":" 1 Вступ до R","heading":"1.1 Встановлення R","text":"Варіантів роботи з мовою програмування R існує досить багато. Розберемо основні.","code":""},{"path":"intro_r.html","id":"install_pc","chapter":" 1 Вступ до R","heading":"1.1.1 Встановлення на комп’ютер","text":"Для початку необхідно встановити саму мову програмування під свою операційну систему:WindowsMacOSLinuxДля роботи в R, також слід встановити інтегроване середовище розробки (IDE) RStudio, що значно підвищує зручність, швидкість та ефективність роботи.Щоб встановити RStudio, завантажте останню версію інсталятора для Вашої операційної системи з сайту https://rstudio.com/products/rstudio/download/","code":""},{"path":"intro_r.html","id":"cloud_r","chapter":" 1 Вступ до R","heading":"1.1.2 Використання хмарних сервісів","text":"У випадках, коли не має можливості або бажання щось додатково встановлювати на ПК є декілька хмарних сервісів:RStudio CloudGoogle Colab","code":""},{"path":"intro_r.html","id":"rstudio","chapter":" 1 Вступ до R","heading":"1.2 RStudio","text":"Я пропоную використовувати саме RStudio, оскільки це найзручніший інструмент для роботи з даними.\nПри чому в ній можна працювати з різними мовами програмування, в тому числі й Python.Якщо ваша операційна система — Windows, то після встановлення R та RStudio, на робочому столі у вас буде дві іконки:Перша належати до самої мови програмування і не буде використовуватись в роботі, друга відноситься до RStudio і саме вона нам потрібна.Після першого запуску RStudio ви побачите інтерфейс на рисунку 1.1\nРисунок 1.1: Базовий інтерфейс RStudio\nЯк правило код пишуть у скрипті (такий собі аналог текстового редактора), тож для його створення необхідно натиснути зелений хрестик в лівому верхньому куті та обрати пункт R Script або натиснути комбінацію клавіш Ctrl+Shift+N:\nРисунок 1.2: Створення скрипта в RStudio\nПісля чого, з’явиться додаткове вікно скрипту, де можна писати код, зберігати його та повертатися до нього за потреби.Розберімо отриманий інтерфейс (рис. 1.3)\nРисунок 1.3: Інтерфейс RStudio\n1. СКРИПТ — відбувається основна робота з кодом.2. КОНСОЛЬ — повертаються результати виконання скриптів. Хоча тут так само писати код, проте він не буде збережений.3. РОБОЧИЙ ПРОСТІР — тут зберігаються змінні, завантажені дата сети та побудовані моделі. Крім того, є окрема вкладинка історії останніх команд.4. ГРАФІКИ та ФАЙЛИ — тут в окремих закладинках демонструються графіки, є невеличкий файловий менеджер, менеджер пакетів (про них трошки пізніше) та довідка по функціях (сюди будемо звертатися досить часто).","code":""},{"path":"intro_r.html","id":"r_basic","chapter":" 1 Вступ до R","heading":"1.3 Базові операції","text":"R - мова програмування з широкими можливостями. З її допомогою можна будувати математичні моделі, проводити статистичні тести, візуалізувати дані тощо. Але почнемо з чогось максимально простого, наприклад, арифметики.","code":""},{"path":"intro_r.html","id":"r_arith","chapter":" 1 Вступ до R","heading":"1.3.1 R та арифметика","text":"Вже з “коробки,” без додаткових пакетів, R надає можливість проводити арифметичні розрахунки. Всі ці операції виконуються за допомогою типових операторів, до яких ми звикли ще з часів навчання в школі або використання Excel.Так, додавання двох чисел використовується оператор +:Для віднімання — оператор -:Множення через оператор *:Ділення — /:Піднесення до степеня через ^:Як бачимо, нічого складного. Розгляньмо ще два оператори.Залишок від ділення — %%:Цілочисельне ділення — %/%:Узагальнений перелік арифметичних операторів я помістив у наступну таблицю.","code":"\n2 + 2\n## [1] 4\n5 - 2\n## [1] 3\n3 * 5\n## [1] 15\n25 / 5\n## [1] 5\n3 ^ 3 \n## [1] 27\n5 %% 3\n## [1] 2\n17 %/% 5\n## [1] 3"},{"path":"intro_r.html","id":"r_comment","chapter":" 1 Вступ до R","heading":"1.3.2 Коментарі до коду","text":"Важливою складовою написання коду, окрім його зрозумілості та лаконічності, є коментарі, які допомагають орієнтуватися, що відбувається в даному шматку коду.Для додавання коментарів використовується знак решітки або, як його ще називають, дієз — #. Все, що написано у рядку після # ігнорується R:Якщо необхідно “закоментувати” частину коду, тобто поставити # на початку кожного рядка, то для цього є комбінація клавіш Ctrl + Shift + C.","code":"\n# look at this awesome code\n2 + 2 - 3 + 1\n## [1] 2"},{"path":"intro_r.html","id":"r_prior","chapter":" 1 Вступ до R","heading":"1.3.3 Пріоритети розрахунків","text":"Після знайомства з арифметикою в R постає логічне питання з приводу пріоритетів операторів. На справді тут все просто, пріоритети працюють як в математиці. Тож не забувайте правильно розставляти дужки.","code":"\n2 + 3 * 4\n## [1] 14\n\n(2 + 3) * 4\n## [1] 20"},{"path":"intro_r.html","id":"r_basic_func","chapter":" 1 Вступ до R","heading":"1.3.4 Готові функції","text":"Крім звичайних арифметичних операторів в мові програмування R одразу вбудовано багато різноманітних функцій, в тому числі й математичних.Для розрахунку кореня квадратного з числа використовується функція sqrt(), яка може бути вам знайома, якщо ви користувалися англомовною версією Excel.Мова програмування R чутлива до регістру, тож варіанти Sqrt(9), SQRT(9) працювати не будуть.Разом з тим, в середині функції можна проводити математичні розрахунки:Функція abs() розраховує абсолютне значення:Розрахунок натурального логарифма через функцію log():Але це ще не все, оскільки для логарифма притаманно мати основу, то в таких випадках слід додати в середині дужок додатковий аргумент base =:Аргументи функцій можна змінювати місцями:До речі не обов’язково писати назви аргументів функцій. Якщо ви впевнені в їх порядку запис може виглядати наступним чином:Взагалі використання функцій — важлива особливість мови програмування R. Ми можемо створювати власні функції, використовувати функції як аргументи інших функцій тощо.","code":"\n9^0.5\n## [1] 3\n\n9^(1/2)\n## [1] 3\n\nsqrt(9)\n## [1] 3\nsqrt((2 + 3) * 4)\n## [1] 4.472136\nabs(3 - 5)\n## [1] 2\nlog(15)\n## [1] 2.70805\nlog(x = 10, base = 3)\n## [1] 2.095903\nlog(base = 3, x = 10)\n## [1] 2.095903\nlog(10, 3)\n## [1] 2.095903"},{"path":"intro_r.html","id":"r_help","chapter":" 1 Вступ до R","heading":"1.3.5 Вбудована документація","text":"Вже на цьому етапі може виникнути ряд питань:де знайти опис функції?які існують аргументи функцій?чи є якісь приклади використання функцій?Відповідь досить проста — всі функції супроводжуються детальною документацією. Для її виклику можна скористуватися функцією help(), де в середині дужок вказати назву функції:Інший варіант — це написати в консолі знак питання і після цього назву функції:Але на мою думку, найшвидший варіант — це написати функцію і натиснути клавішу F1 на клавіатурі.Всі зазначені варіанти приведуть вас до вікна документації у правому нижньому куті RStudio:","code":"\nhelp(abs)\n?abs()"},{"path":"intro_r.html","id":"r_var","chapter":" 1 Вступ до R","heading":"1.3.6 Створення змінних","text":"Ще один важливий пункт у багатьох мовах програмування — можливість зберігати значення у змінних.В R це робиться за допомогою символів <-. Для швидкого написання існує зручна комбінація клавіш Alt + -.Ліворуч від символу <- записується назва майбутньої змінної. Праворуч — значення або вираз, яке необхідно зберегти в цю змінну.Для присвоювання можна використовувати і знак = але серед спільноти користувачів R це не прийнято.Слід звернути увагу, що при присвоюванні результат розрахунку не виводиться в консоль. Якщо ж хочеться переглянути результат слід використати функцію print() або просто звернутися до створеної змінної:","code":"\nx <- 2\ny <- 4\nz <- sqrt(x^2 + y^3)\nprint(z)\n## [1] 8.246211\n\nz\n## [1] 8.246211"},{"path":"intro_r.html","id":"r_opers","chapter":" 1 Вступ до R","heading":"1.3.7 Оператори порівняння","text":"В процесі роботи з даними, досить часто працюємо з задачами порівняння. Для розв’язання таких питань в мові програмування R є зручні та зрозумілі оператори:Окремо зауважу, що для порівняння двох змінних використовується оператор з подвійним знаком дорівнює ==, а не з одним =. Це досить популярна помилка.","code":""},{"path":"intro_r.html","id":"r_types","chapter":" 1 Вступ до R","heading":"1.4 Типи даних","text":"Інформація зберігається в різних типах даних. Це може бути число, текст, булева змінна тощо.Один з найпопулярніших варіантів збереження даних — це числовий формат. В мові програмування R для нього є окремий клас — numeric. При цьому існує три типи numeric:Цілі - integer.Дробові - double.Комплексні - complex.В більшості випадків R буде сам конвертувати числа в потрібний формат. Але якщо необхідно задати конкретний тип числа, то можна використати функції .integer(), .double() та .complex().В мові програмування R досить багато функцій, які починаються на ., які переводять об’єкт до конкретного класу. Іншими словами просить читати дані в середині дужок у відповідному форматі.Для створення цілочислового значення можна в кінці поставити символ L, щоб примусово оголосити число як integer:Функції, що починаються на . перевіряють, чи належить об’єкт до обраного класу.Для роботи з текстовими даними є клас character. Вони записуються в лапках, при цьому можна використовувати як подвійні \", так і одинарні '.Логічні (logical) данні - це тип даних які приймають лише значення TRUE або FALSE. Ми з ними вже зустрічалися коли використовували оператори порівняння.Для перевірки типу даних використовується функція class():","code":"\nis.integer(10)\n## [1] FALSE\n\nis.integer(10L)\n## [1] TRUE\nis.character(\"Ash nazg durbatulûk, ash nazg gimbatul,\n             ash nazg thrakatulûk, agh burzum-ishi krimpatul.\")\n## [1] TRUE\nclass(5)\n## [1] \"numeric\""},{"path":"intro_r.html","id":"r_str","chapter":" 1 Вступ до R","heading":"1.5 Структури даних","text":"\nРисунок 1.4: Структури даних R\n","code":""},{"path":"intro_r.html","id":"r_vec","chapter":" 1 Вступ до R","heading":"1.5.1 Вектор","text":"Почнемо з найпростішого. Вектор - це одновимірна послідовність елементів одного типу. Для створення вектору використовується функція c().Для створення послідовностей з кроком 1 зручно використовувати оператор :Для складніших послідовностей є вбудована функція seq() (не забувайте дивитися довідку по функціях)Крім того, можна задати не лише крок послідовності (аргумент =), а й довжину (аргумент length.=)Інша корисна функція rep() дозволяє створити вектор з повторюваними значеннями. Перший аргумент - значення яке слід повторювати, другий аргумент - скільки разів повторювати.При цьому і перший і другий аргумент може бути вектором:Крім того, можна об’єднувати вектори:В означенні вектора в мові програмування R сказано, що всі елементи вектори мають бути одного типу. Одразу хочеться перевірити, що буде, якщо ця умова не буде виконуватись. В більшості мов програмування ми б отримали помилку. Мова програмування R, при розбіжності типів, буде зводити все до “спільного знаменника,” тобто конвертувати дані за певними правилами - приведення типів (coercion).Виділяють два типи:неявне приведення типів (implicit coercion), коли все відбувається автоматично за вбудованими правилами.явне приведення типів (explicit coercion), коли ми самі вирішуємо до якого типу перевести дані, якщо це можливо.Приклад неявного приведення типів:TRUE перетворився в 1, а FALSE в 0.\nВ цьому випадку всі дані приведено до текстового типу:В R є своя ієрархія типів:\nNULL < raw < logical < integer < double < complex < character < list < expressionДля явного приведення типів даних використовується сімейство функцій, що починається на .:","code":"\nc(2, 4, 8, -2, -6, 0)\n## [1]  2  4  8 -2 -6  0\n\nc(\"два\", \"чотири\", \"шість\")\n## [1] \"два\"    \"чотири\" \"шість\"\n\nc(TRUE, TRUE, FALSE)\n## [1]  TRUE  TRUE FALSE\n-5:5\n##  [1] -5 -4 -3 -2 -1  0  1  2  3  4  5\n\n3:-2\n## [1]  3  2  1  0 -1 -2\nseq(1, 10, by = 2)\n## [1] 1 3 5 7 9\nseq(1, 10, length.out = 3)\n## [1]  1.0  5.5 10.0\nrep(3, 5)\n## [1] 3 3 3 3 3\nrep(1:3, 5)\n##  [1] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n\nrep(1:3, 1:3)\n## [1] 1 2 2 3 3 3\nv1 <- c(\"Say\", \"friend\")\n\nv2 <- c(\"and\", \"enter\")\n\nc(v1, v2)\n## [1] \"Say\"    \"friend\" \"and\"    \"enter\"\nc(TRUE, 2, FALSE)\n## [1] 1 2 0\n\n3 - TRUE\n## [1] 2\nc(TRUE, 2, \"Hello\")\n## [1] \"TRUE\"  \"2\"     \"Hello\"\nas.numeric(c(TRUE, 2, FALSE, FALSE))\n## [1] 1 2 0 0\n\nas.character(c(TRUE, 2, FALSE, FALSE))\n## [1] \"1\" \"2\" \"0\" \"0\""},{"path":"intro_r.html","id":"r_vec_oper","chapter":" 1 Вступ до R","heading":"1.5.1.1 Операції з векторами","text":"Всі арифметичні операції, що ми розглядали раніше, можна використовувати й до векторів однакової довжини:","code":"\nq <- 1:5\n\nw <- 2:6\n\nq + w\n## [1]  3  5  7  9 11\n\nq - w\n## [1] -1 -1 -1 -1 -1\n\nq * w\n## [1]  2  6 12 20 30\n\nq / w\n## [1] 0.5000000 0.6666667 0.7500000 0.8000000 0.8333333\n\nw ^ q + q - w * q\n## [1]    1    5   55  609 7751\n\nsqrt(q)\n## [1] 1.000000 1.414214 1.732051 2.000000 2.236068"},{"path":"intro_r.html","id":"r_rec_rule","chapter":" 1 Вступ до R","heading":"1.5.1.2 Правило переписування","text":"Якщо вектори не однакової довжини й ми хочемо провести з ними певні операції, то в такому випадку спрацює правило переписування (recycling rule): якщо коротший вектор кратний довжині довшого, короткий буде повторюватися необхідну кількість разів.Операції з вектором та окремим значенням можна вважати окремим випадком рестайлінгу: окреме значення буде повторюватися необхідну кількість разів:Якщо коротший вектор не кратний довшому (наприклад, перший довжиною 2, а інший - 3), то R все одно порахує результат, але видасть попередження:","code":"\nq <- 1:2\nw <- 1:4\nq * w\n## [1] 1 4 3 8\nw * 2\n## [1] 2 4 6 8\nq + c(1, 5, 7)\n## Warning in q + c(1, 5, 7): longer object length is not a multiple of shorter object length\n## [1] 2 7 8"},{"path":"intro_r.html","id":"r_vec_idx","chapter":" 1 Вступ до R","heading":"1.5.1.3 Індексація векторів","text":"Індексація - задача вибору окремого елемента структури даних. Для цього використовуються квадратні дужки [].Найпростіший варіант індексація по номеру, тобто порядкове значення елемента:Важливий факт - індексація в мові програмування R починається з 1.За допомогою індексації можна не лише звертатися до окремого елементу, а й заміняти його значення:Можна використовувати цілі вектори для індексації:Індексація зі знаком мінус видасть всі значення вектора крім обраних:","code":"\ne <- c(-5:-3, 2, 7, -6, 4:2)\ne[1]\n## [1] -5\n\ne[5]\n## [1] 7\ne[5] <- 15\ne[2:5]\n## [1] -4 -3  2 15\n\ne[6:1]\n## [1] -6 15  2 -3 -4 -5\ne[-1]\n## [1] -4 -3  2 15 -6  4  3  2\n\ne[c(-1, -5)]\n## [1] -4 -3  2 -6  4  3  2"},{"path":"intro_r.html","id":"r_matrix","chapter":" 1 Вступ до R","heading":"1.5.2 Матриці","text":"Матриця (matrix) — це двовимірний масив даних, в якому кожен елемент має однаковий тип (числовий, текстовий, логічний). Іншими словами, матриця - це двовимірний вектор, у якого є довжина та ширина.Створення матриці відбувається за допомогою функції matrix(), в якій слід вказати кількість рядків та стовпчиків:За замовчуванням значення матриці заповнюються по стовпчиках. Але це можна змінити за допомогою аргументу byrow = TRUEОскільки матриця — це двовимірний масив, то для індексації використовуються два індекси, що розділені комою: перший відповідає за рядок, другий за стовпчик.Якщо один з індексів залишити пустим — отримаємо всі значення рядка/стовпчика в залежності від того, який індекс ми не вказуємо.Аналогічно до вектора, за допомогою індексації можна переписувати частину матриці:","code":"\nmatrix(1:16, nrow = 4, ncol = 4)\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    5    9   13\n## [2,]    2    6   10   14\n## [3,]    3    7   11   15\n## [4,]    4    8   12   16\nmatrix(1:16, nrow = 4, ncol = 4, byrow = TRUE)\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    2    3    4\n## [2,]    5    6    7    8\n## [3,]    9   10   11   12\n## [4,]   13   14   15   16\nmy_matrix <- matrix(1:16, nrow = 4, ncol = 4)\nmy_matrix\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    5    9   13\n## [2,]    2    6   10   14\n## [3,]    3    7   11   15\n## [4,]    4    8   12   16\n\nmy_matrix[2, 3]\n## [1] 10\n\nmy_matrix[1:2, 3:4]\n##      [,1] [,2]\n## [1,]    9   13\n## [2,]   10   14\nmy_matrix[, 1:2]\n##      [,1] [,2]\n## [1,]    1    5\n## [2,]    2    6\n## [3,]    3    7\n## [4,]    4    8\n\nmy_matrix[1:2, ]\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    5    9   13\n## [2,]    2    6   10   14\nmy_matrix[1:2, 3:4] <- 0\nmy_matrix\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    5    0    0\n## [2,]    2    6    0    0\n## [3,]    3    7   11   15\n## [4,]    4    8   12   16"},{"path":"intro_r.html","id":"r_array","chapter":" 1 Вступ до R","heading":"1.5.3 Масиви","text":"Масиви даних (array) — схожі на матриці, але мають понад два виміри. Створюються вони за допомогою функції array(), де слід вказати вектор, з якого буде створено масив, і його розмірність:","code":"\nmy_array <- array(1:16, c(4, 2, 2))\nmy_array\n## , , 1\n## \n##      [,1] [,2]\n## [1,]    1    5\n## [2,]    2    6\n## [3,]    3    7\n## [4,]    4    8\n## \n## , , 2\n## \n##      [,1] [,2]\n## [1,]    9   13\n## [2,]   10   14\n## [3,]   11   15\n## [4,]   12   16"},{"path":"intro_r.html","id":"r_list","chapter":" 1 Вступ до R","heading":"1.5.4 Списки","text":"Списки — це впорядкований набір об’єктів. Я представляю собі списки, як блокнот, в якому на кожній сторінці зберігається інформація у певному форматі. Вони можуть зберігати різні дані, в тому числі вектори, матриці, дата фрейми й інші списки.Списки створюються за допомогою функції list():В цьому випадку vec, gendalf та my_matrix — назви елементів списку.Для звернення до елементів списку можна використовувати індекси або імена (через символ $). При зверненні через індекс необхідно використовувати подвійні квадратні дужки, наприклад:Списки досить часто використовуються в R, наприклад результати побудови математичних моделей, статистичних тестів зберігаються у вигляді списків. тож важливо вміти з ними працювати.","code":"\nmy_list <- list(vec = c(1:5),\n                gendalf = \"You shall not pass\",\n                my_matrix = matrix(1:4, ncol = 2))\nmy_list\n## $vec\n## [1] 1 2 3 4 5\n## \n## $gendalf\n## [1] \"You shall not pass\"\n## \n## $my_matrix\n##      [,1] [,2]\n## [1,]    1    3\n## [2,]    2    4\nmy_list[[2]]\n## [1] \"You shall not pass\"\n\nmy_list$gendalf\n## [1] \"You shall not pass\"\n\nmy_list[['gendalf']]\n## [1] \"You shall not pass\""},{"path":"intro_r.html","id":"r_dataframe","chapter":" 1 Вступ до R","heading":"1.5.5 Дата фрейми","text":"Нарешті ми перейшли до найголовнішого - дата фрейми (data frames). Саме з такою структурою даних працюють найчастіше. Головною особливістю їх є те, що різні стовпчики можуть містити різний тип даних (але їх довжина має бути однаковою).\nДля створення дата фрейму використовується функція data.frame().Переглянути структуру дата фрейму можна за допомогою функції str():В нашому випадку перший та другий стовпчик - текстові, третя - числова, четверта - логічна.Переглянути назви стовпців або надати їм нову назву можна за допомогою функції names().Індексація аналогічно до матриці та списків можлива через [] та знак $.Для перегляду дата фрейму в RStudio використовується функція View() або можна просто натиснути на назву змінної у розділі Environment. Ви побачите таблицю, дещо схожу на Excel або Google Spreadsheets.","code":"\nmy_df <- data.frame(name = c(\"Frodo\", \"Eowyn\", \"Legolas\", \"Arwen\"),\n                    sex = c(\"male\", \"female\", \"male\", \"female\"),\n                    age = c(51, 24, 2931, 2700),\n                    one_ring = c(TRUE, FALSE, FALSE, FALSE))\nmy_df\nstr(my_df)\n## 'data.frame':    4 obs. of  4 variables:\n##  $ name    : chr  \"Frodo\" \"Eowyn\" \"Legolas\" \"Arwen\"\n##  $ sex     : chr  \"male\" \"female\" \"male\" \"female\"\n##  $ age     : num  51 24 2931 2700\n##  $ one_ring: logi  TRUE FALSE FALSE FALSE\nnames(my_df)\n## [1] \"name\"     \"sex\"      \"age\"      \"one_ring\"\nmy_df$name\n## [1] \"Frodo\"   \"Eowyn\"   \"Legolas\" \"Arwen\"\n\nmy_df$name[2:3]\n## [1] \"Eowyn\"   \"Legolas\"\n\nmy_df[2,3]\n## [1] 24\n\nmy_df[2:3, \"name\"]\n## [1] \"Eowyn\"   \"Legolas\""},{"path":"intro_r.html","id":"r_packages","chapter":" 1 Вступ до R","heading":"1.6 Пакети в R","text":"R - мова програмування з дуже широкими можливостями. Однак рано чи пізно ми почнемо стикатися з задачами, які потребуватимуть додаткових можливостей. Ці можливості можна розширити за допомогою додаткових пакетів (packages).В більшості випадків основним змістом пакетів є набір додаткових функцій, даних або нових структур даних.До найпопулярніших пакетів у сфері науки про дані (data science) можна віднести екосистему пакетів tidyverse, пакети data.table, mlr3 та ще багато-багато інших.","code":""},{"path":"intro_r.html","id":"r_base_packages","chapter":" 1 Вступ до R","heading":"1.6.1 Вбудовані пакети","text":"Разом з самою мовою програмування R поставляються пакети, які не потрібно встановлювати: основний base та декілька інших, такі як stats, utils, graphics та інші. Повний перелік можна переглянути за наступним кодом:","code":"\nrownames(installed.packages(priority = \"base\"))\n##  [1] \"base\"      \"compiler\"  \"datasets\"  \"graphics\"  \"grDevices\" \"grid\"      \"methods\"   \"parallel\" \n##  [9] \"splines\"   \"stats\"     \"stats4\"    \"tcltk\"     \"tools\"     \"utils\""},{"path":"intro_r.html","id":"r_cran","chapter":" 1 Вступ до R","heading":"1.6.2 Встановлення пакетів з CRAN","text":"Пакети які пройшли перевірку зберігаються в Comprehensive R Archive Network (CRAN). Для перегляду кількості опублікованих пакетів на CRAN можна використати наступний код:І з кожним роком їх стає все більше:\n\nФункція install.packages() дозволяє звантажувати та встановлювати пакети з CRAN. Для прикладу встановимо пакет vroom, для зчитування файлів\nРисунок 1.5: Меню встановлення пакетів в RStudio\nАбо через кнопку в розділі Packages (рис. 1.6)\nРисунок 1.6: Кнопка встановлення пакетів\n\nРисунок 1.7: Меню встановлення пакетів\n","code":"\nnrow(available.packages())\n## [1] 18189\ninstall.packages(\"vroom\")"},{"path":"intro_r.html","id":"r_git","chapter":" 1 Вступ до R","heading":"1.6.3 Встановлення пакетів з GitHub","text":"Бувають випадки, коли автори пакетів не пройшли або не захотіли проходити перевірку через CRAN (насправді причин може бути безліч). В таких випадках пакет (який ви напевно знайшли через пошук в Google) скоріш за все буде зберігатися на репозиторію GitHub. Для таких випадків нам необхідно встановити пакет devtools та використати з нього функцію install_github(). Покажу на прикладі пакету xaringan, який я використовую для створення інтерактивних презентацій.Посилання yihui/xaringan — це адреса пакету в GitHub","code":"\ndevtools::install_github('yihui/xaringan')"},{"path":"intro_r.html","id":"r_lib","chapter":" 1 Вступ до R","heading":"1.6.4 Підключення пакетів","text":"Після завантаження пакета, для того щоб почати користуватися його функціоналом необхідно його підключити до поточної сесії. Для цього використовується функція library(). Назву пакету можна писати як в лапках так і без них.Як правило, підключення пакетів записується на початку скрипта, що дає можливість зрозуміти який інструментарій використовується в ньому.","code":"\nlibrary(vroom)"},{"path":"intro_r.html","id":"r_::","chapter":" 1 Вступ до R","heading":"1.6.5 Виклик функції через ::","text":"У випадках, коли функцію з пакету буде використано вcього декілька разів, є сенс не підключати весь пакет, а завантажити тільки окрему його функцію. Для цього використовується спеціальний оператор ::, ліворуч від якого вказується назва пакету, а праворуч відповідна функція з обраного пакету.Крім того оператор :: корисний у випадках, коли в різних пакетах присутні функції з однаковою назвою. Наприклад в пакеті dplyr є функція filter(). Функція з такою ж назвою є в базовому пакеті stats, який використовується у зовсім інших задачах. В таких просто вкажіть з якого пакету ви хочете використати функцію:Пріоритет надається функціоналу пакету, який був підключений останній.","code":"\nvroom::vroom_example()\nstats::filter(1:10, rep(1,3))"},{"path":"tidy_verse.html","id":"tidy_verse","chapter":" 2 Вступ у Tidyverse","heading":" 2 Вступ у Tidyverse","text":"","code":""},{"path":"tidy_verse.html","id":"tidy","chapter":" 2 Вступ у Tidyverse","heading":"2.1 Tidy-всесвіт","text":"Tidyverse — це екосистема, набір пакетів, які спеціально створені для науки про дані (data science). В ньому є ключові пакети (ядро tidyverse) та побічні — які додатково розширюють можливості мови програмування R.Концепція охайних даних (tidy-data) передбачає приведення даних до формату, в якому:Кожна змінна міститься в окремому стовпчикуКожна змінна міститься в окремому стовпчикуКожне спостереження міститься в окремому рядкуКожне спостереження міститься в окремому рядкуКожне значення міститься в окремій комірціКожне значення міститься в окремій комірціЯдро tidyverse:ggplot2, для візуалізаціїggplot2, для візуалізаціїdplyr, для маніпуляції з данимиdplyr, для маніпуляції з данимиtidyr, для отримання охайних даних (tidy data)tidyr, для отримання охайних даних (tidy data)readr, для зчитування та записування файлів в Rreadr, для зчитування та записування файлів в Rpurrr, для функціонального програмуванняpurrr, для функціонального програмуванняtibble, для роботи з тібблами (tibble), просунутий варіант дата фреймівtibble, для роботи з тібблами (tibble), просунутий варіант дата фреймівstringr, для роботи з текстовими данимиstringr, для роботи з текстовими данимиforcats, для роботи з факторами (factors)forcats, для роботи з факторами (factors)Крім того є ще низка допоміжних пакетів, які не входять до ядра tidyverse але вважаються його частиною:vroom, для швидкого завантаження данихvroom, для швидкого завантаження данихDBI, для роботи з базами данихDBI, для роботи з базами данихhaven, для даних SPSS, Stata та SAShaven, для даних SPSS, Stata та SAShttr, для роботи з APIhttr, для роботи з APIreadxl для завантаження .xls та .xlsx файлівreadxl для завантаження .xls та .xlsx файлівgooglesheets4, для роботи з Google Sheetgooglesheets4, для роботи з Google Sheetgoogledrive, для роботи з Google Drivegoogledrive, для роботи з Google Drivervest, для скрапінгу веб-сторінокrvest, для скрапінгу веб-сторінокjsonlite, для роботи з JSON-файламиjsonlite, для роботи з JSON-файламиxml2, для роботи з XMLxml2, для роботи з XMLlubridate, для роботи з датамиlubridate, для роботи з датамиdbplyr, для перетворення коду dplyr в SQLdbplyr, для перетворення коду dplyr в SQLdtplyr, для перетворення коду на data.tabledtplyr, для перетворення коду на data.tablemagrittr, для використання конвеєрів %>% (pipe)magrittr, для використання конвеєрів %>% (pipe)glue, для поєднання даних та текстуglue, для поєднання даних та текстуtidymodels, для роботи з моделями манинного навчання.tidymodels, для роботи з моделями манинного навчання.І це ще не повний список. Крім офіційних пакетів tidyverse є ще низка пакетів, які намагаються відповідати принципам tidyverse і доповнюють його.Для завантаження tidyverse необхідно виконати наступний код:Для підключення:","code":"\ninstall.packages(\"tidyverse\")\nlibrary(\"tidyverse\")"},{"path":"tidy_verse.html","id":"tidy_read","chapter":" 2 Вступ у Tidyverse","heading":"2.2 Завантаження даних","text":"","code":""},{"path":"tidy_verse.html","id":"tidy_csv","chapter":" 2 Вступ у Tidyverse","heading":"2.2.1 Завантаження .csv, .tsv файлів","text":"Стандартною функцією завантаження даних типу .csv є функція read.csv(), але на досить великих масивах даних краще використовувати read_csv() з пакету readr. Синтаксис цих функцій схожий, але read_csv() одразу приведе дані до формату tibble.\nПершим аргументом функції є шлях до файлу (зі оберненим слешем /), в тому числі URL-посилання:Аналогічно до read_csv() можна використовувати функцію vroom з однойменного пакету. Головною особливістю цього пакету є швидкість завантаження даних.Для завантаження одночасно декількох файлів однакової структури корисно використовувати наступну конструкцію","code":"\nread_file <- read_csv(\"docs/data/file.csv\")\nread_url <- read_csv(\"https://git.io/JztOr\")\nvroom_file <- vroom(\"docs/data/file.csv\")\nvroom_url <- vroom(\"https://git.io/JztOr\")\nfilse <- dir(pattern = \"\\\\.csv$\")\nvroom_all <- vroom(filse)"},{"path":"tidy_verse.html","id":"tidy_xls","chapter":" 2 Вступ у Tidyverse","heading":"2.2.2 Завантаження .xls, .xlsx файлів","text":"Для завантаження файлів Excel використовується пакет readxl та функція read_excel().\nНа початку можна отримати перелік листів файлу Excel за допомогою функції excel_sheets()Після чого зчитати данні з потрібного листаВ більшості випадків цього інструментарію має бути достатньо, але для завантаження специфічних файлів завжди можна знайти потрібний пакет. Не соромтеся використовувати google.","code":"\nreadxl::excel_sheets(\"docs/data/tourism.xlsx\")\n## [1] \"Sheet1\" \"Sheet2\" \"Sheet3\"\nexcel_file <- read_excel(\"docs/data/tourism.xlsx\", sheet = \"Sheet1\")"},{"path":"tidy_verse.html","id":"tidy_dplyr","chapter":" 2 Вступ у Tidyverse","heading":"2.3 Маніпуляції з даними за допомогою пакету dplyr","text":"dplyr — це один з найголовніших пакетів tidyverse. Головний його функціонал — це різноманітні маніпуляції з даними:фільтрація даних — filter()фільтрація даних — filter()впорядкування даних — arrange()впорядкування даних — arrange()вибір змінних — select()вибір змінних — select()створення нових змінних — mutate()створення нових змінних — mutate()групування даних — group_byгрупування даних — group_byагрегування даних — summarise()агрегування даних — summarise()","code":""},{"path":"tidy_verse.html","id":"tidy_filter","chapter":" 2 Вступ у Tidyverse","heading":"2.3.1 Фільтрація рядків - filter()","text":"Функція filter() дозволяє формувати підвибірки даних на основі їх значень. Її перший аргумент — ім’я дата фрейму, другий і наступні — умови фільтрації.Розберемо на прикладі датасету gapmainder з однойменного пакету (див. таб. 2.1). В ньому збережена інформація про ВВП, очікувану тривалість життя при народженні та населення для 142 країн світу з 1952 по 2007 роки.Таблиця 2.1: Перші шість значень датасету gapminderПерш за все підключимо необхідні пакети:Виконаємо просту фільтрацію з однією умовою:Фільтрація з декількома умовами:Умов фільтрації можна додавати безліч, їх можна перелічити через кому. Але створювати складні фільтрації можна у більш компактній формі. Для цього можна використати оператори: “ТА” (&), “АБО” (|), “НЕ” (!), а також функцію xor(), яка виключає АБО:Ще один зручний спосіб формування складного фільтру — використання виразу x %% y, який фільтрує всі значення в яких x є одним із значень серед y:","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nfilter(gapminder, year == 2007)\n## # A tibble: 142 x 6\n##    country     continent  year lifeExp       pop gdpPercap\n##    <fct>       <fct>     <int>   <dbl>     <int>     <dbl>\n##  1 Afghanistan Asia       2007    43.8  31889923      975.\n##  2 Albania     Europe     2007    76.4   3600523     5937.\n##  3 Algeria     Africa     2007    72.3  33333216     6223.\n##  4 Angola      Africa     2007    42.7  12420476     4797.\n##  5 Argentina   Americas   2007    75.3  40301927    12779.\n##  6 Australia   Oceania    2007    81.2  20434176    34435.\n##  7 Austria     Europe     2007    79.8   8199783    36126.\n##  8 Bahrain     Asia       2007    75.6    708573    29796.\n##  9 Bangladesh  Asia       2007    64.1 150448339     1391.\n## 10 Belgium     Europe     2007    79.4  10392226    33693.\n## # ... with 132 more rows\nfilter(gapminder, year == 2007, continent == \"Europe\")\n## # A tibble: 30 x 6\n##    country                continent  year lifeExp      pop gdpPercap\n##    <fct>                  <fct>     <int>   <dbl>    <int>     <dbl>\n##  1 Albania                Europe     2007    76.4  3600523     5937.\n##  2 Austria                Europe     2007    79.8  8199783    36126.\n##  3 Belgium                Europe     2007    79.4 10392226    33693.\n##  4 Bosnia and Herzegovina Europe     2007    74.9  4552198     7446.\n##  5 Bulgaria               Europe     2007    73.0  7322858    10681.\n##  6 Croatia                Europe     2007    75.7  4493312    14619.\n##  7 Czech Republic         Europe     2007    76.5 10228744    22833.\n##  8 Denmark                Europe     2007    78.3  5468120    35278.\n##  9 Finland                Europe     2007    79.3  5238460    33207.\n## 10 France                 Europe     2007    80.7 61083916    30470.\n## # ... with 20 more rows\nfilter(gapminder, year == 2007 & country == \"New Zealand\")\n## # A tibble: 1 x 6\n##   country     continent  year lifeExp     pop gdpPercap\n##   <fct>       <fct>     <int>   <dbl>   <int>     <dbl>\n## 1 New Zealand Oceania    2007    80.2 4115771    25185.\n\nfilter(gapminder, year == 2002 | year == 2007)\n## # A tibble: 284 x 6\n##    country     continent  year lifeExp      pop gdpPercap\n##    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n##  1 Afghanistan Asia       2002    42.1 25268405      727.\n##  2 Afghanistan Asia       2007    43.8 31889923      975.\n##  3 Albania     Europe     2002    75.7  3508512     4604.\n##  4 Albania     Europe     2007    76.4  3600523     5937.\n##  5 Algeria     Africa     2002    71.0 31287142     5288.\n##  6 Algeria     Africa     2007    72.3 33333216     6223.\n##  7 Angola      Africa     2002    41.0 10866106     2773.\n##  8 Angola      Africa     2007    42.7 12420476     4797.\n##  9 Argentina   Americas   2002    74.3 38331121     8798.\n## 10 Argentina   Americas   2007    75.3 40301927    12779.\n## # ... with 274 more rows\nfilter(gapminder, year == 2007 & country %in% c(\"New Zealand\", \"Poland\", \"Ireland\"))\n## # A tibble: 3 x 6\n##   country     continent  year lifeExp      pop gdpPercap\n##   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n## 1 Ireland     Europe     2007    78.9  4109086    40676.\n## 2 New Zealand Oceania    2007    80.2  4115771    25185.\n## 3 Poland      Europe     2007    75.6 38518241    15390."},{"path":"tidy_verse.html","id":"tidy_arrange","chapter":" 2 Вступ у Tidyverse","heading":"2.3.2 Впорядкування рядків - arrange()","text":"Функція arrange() впорядковує рядки в порядку зростання (для числових змінних) або в алфавітному порядку (для категоріальних змінних).Для впорядкування в порядку зменшення використовується функція desc() або знак - перед змінною.","code":"\narrange(gapminder, lifeExp)\n## # A tibble: 1,704 x 6\n##    country      continent  year lifeExp     pop gdpPercap\n##    <fct>        <fct>     <int>   <dbl>   <int>     <dbl>\n##  1 Rwanda       Africa     1992    23.6 7290203      737.\n##  2 Afghanistan  Asia       1952    28.8 8425333      779.\n##  3 Gambia       Africa     1952    30    284320      485.\n##  4 Angola       Africa     1952    30.0 4232095     3521.\n##  5 Sierra Leone Africa     1952    30.3 2143249      880.\n##  6 Afghanistan  Asia       1957    30.3 9240934      821.\n##  7 Cambodia     Asia       1977    31.2 6978607      525.\n##  8 Mozambique   Africa     1952    31.3 6446316      469.\n##  9 Sierra Leone Africa     1957    31.6 2295678     1004.\n## 10 Burkina Faso Africa     1952    32.0 4469979      543.\n## # ... with 1,694 more rows\narrange(gapminder, desc(lifeExp))\n## # A tibble: 1,704 x 6\n##    country          continent  year lifeExp       pop gdpPercap\n##    <fct>            <fct>     <int>   <dbl>     <int>     <dbl>\n##  1 Japan            Asia       2007    82.6 127467972    31656.\n##  2 Hong Kong, China Asia       2007    82.2   6980412    39725.\n##  3 Japan            Asia       2002    82   127065841    28605.\n##  4 Iceland          Europe     2007    81.8    301931    36181.\n##  5 Switzerland      Europe     2007    81.7   7554661    37506.\n##  6 Hong Kong, China Asia       2002    81.5   6762476    30209.\n##  7 Australia        Oceania    2007    81.2  20434176    34435.\n##  8 Spain            Europe     2007    80.9  40448191    28821.\n##  9 Sweden           Europe     2007    80.9   9031088    33860.\n## 10 Israel           Asia       2007    80.7   6426679    25523.\n## # ... with 1,694 more rows\n\narrange(gapminder, -pop)\n## # A tibble: 1,704 x 6\n##    country continent  year lifeExp        pop gdpPercap\n##    <fct>   <fct>     <int>   <dbl>      <int>     <dbl>\n##  1 China   Asia       2007    73.0 1318683096     4959.\n##  2 China   Asia       2002    72.0 1280400000     3119.\n##  3 China   Asia       1997    70.4 1230075000     2289.\n##  4 China   Asia       1992    68.7 1164970000     1656.\n##  5 India   Asia       2007    64.7 1110396331     2452.\n##  6 China   Asia       1987    67.3 1084035000     1379.\n##  7 India   Asia       2002    62.9 1034172547     1747.\n##  8 China   Asia       1982    65.5 1000281000      962.\n##  9 India   Asia       1997    61.8  959000000     1459.\n## 10 China   Asia       1977    64.0  943455000      741.\n## # ... with 1,694 more rows"},{"path":"tidy_verse.html","id":"tidy_select","chapter":" 2 Вступ у Tidyverse","heading":"2.3.3 Відбір стовпчиків - select()","text":"Функція select() дозволяє відібрати тільки ті змінні, які нас цікавлять. Як і минулого разу, перший аргумент функції — це дата фрейм, наступний — обрані стовпці:Крім того не обов’язково вказувати назви змінних, можна вказувати їх порядковий номер:Або вказувати їх послідовність у векторі:Аналогічно, послідовність буде працювати і для назв стовпців:Функція everything() повертає всі стовпчики, але не буде повертати вже обрані стовпчики. Тому її можна використовувати для зміни позицій змінних в дата фреймі. Хоча в більшості випадків зручніше для таких задач використовувати функцію relocate().За допомогою таких функцій як starts_with(), ends_with(), contains(), matches() можна відбирати стовпчики за певним патерном у назві.Виберемо стовпчики, назва яких починається на латинську літеру “с”Або стовпчики, назва яких закінчується на латинську літеру “p”Стовпчики, назва яких містить на латинську літеру “o”Функція matches() використовується для відбору за регулярними виразами, з якими можна ознайомитися у книзі “Mastering Regular Expressions” (Friedl 2006).Відбір стовпчиків за їх типом даних виконується за допомогою функції select_if():","code":"\nselect(gapminder, country, year, gdpPercap)\n## # A tibble: 1,704 x 3\n##    country      year gdpPercap\n##    <fct>       <int>     <dbl>\n##  1 Afghanistan  1952      779.\n##  2 Afghanistan  1957      821.\n##  3 Afghanistan  1962      853.\n##  4 Afghanistan  1967      836.\n##  5 Afghanistan  1972      740.\n##  6 Afghanistan  1977      786.\n##  7 Afghanistan  1982      978.\n##  8 Afghanistan  1987      852.\n##  9 Afghanistan  1992      649.\n## 10 Afghanistan  1997      635.\n## # ... with 1,694 more rows\nselect(gapminder, 1, 3, 5)\n## # A tibble: 1,704 x 3\n##    country      year      pop\n##    <fct>       <int>    <int>\n##  1 Afghanistan  1952  8425333\n##  2 Afghanistan  1957  9240934\n##  3 Afghanistan  1962 10267083\n##  4 Afghanistan  1967 11537966\n##  5 Afghanistan  1972 13079460\n##  6 Afghanistan  1977 14880372\n##  7 Afghanistan  1982 12881816\n##  8 Afghanistan  1987 13867957\n##  9 Afghanistan  1992 16317921\n## 10 Afghanistan  1997 22227415\n## # ... with 1,694 more rows\nselect(gapminder, c(1, 4:6))\n## # A tibble: 1,704 x 4\n##    country     lifeExp      pop gdpPercap\n##    <fct>         <dbl>    <int>     <dbl>\n##  1 Afghanistan    28.8  8425333      779.\n##  2 Afghanistan    30.3  9240934      821.\n##  3 Afghanistan    32.0 10267083      853.\n##  4 Afghanistan    34.0 11537966      836.\n##  5 Afghanistan    36.1 13079460      740.\n##  6 Afghanistan    38.4 14880372      786.\n##  7 Afghanistan    39.9 12881816      978.\n##  8 Afghanistan    40.8 13867957      852.\n##  9 Afghanistan    41.7 16317921      649.\n## 10 Afghanistan    41.8 22227415      635.\n## # ... with 1,694 more rows\nselect(gapminder, c(country, lifeExp:gdpPercap))\n## # A tibble: 1,704 x 4\n##    country     lifeExp      pop gdpPercap\n##    <fct>         <dbl>    <int>     <dbl>\n##  1 Afghanistan    28.8  8425333      779.\n##  2 Afghanistan    30.3  9240934      821.\n##  3 Afghanistan    32.0 10267083      853.\n##  4 Afghanistan    34.0 11537966      836.\n##  5 Afghanistan    36.1 13079460      740.\n##  6 Afghanistan    38.4 14880372      786.\n##  7 Afghanistan    39.9 12881816      978.\n##  8 Afghanistan    40.8 13867957      852.\n##  9 Afghanistan    41.7 16317921      649.\n## 10 Afghanistan    41.8 22227415      635.\n## # ... with 1,694 more rows\nselect(gapminder, continent, everything())\n## # A tibble: 1,704 x 6\n##    continent country      year lifeExp      pop gdpPercap\n##    <fct>     <fct>       <int>   <dbl>    <int>     <dbl>\n##  1 Asia      Afghanistan  1952    28.8  8425333      779.\n##  2 Asia      Afghanistan  1957    30.3  9240934      821.\n##  3 Asia      Afghanistan  1962    32.0 10267083      853.\n##  4 Asia      Afghanistan  1967    34.0 11537966      836.\n##  5 Asia      Afghanistan  1972    36.1 13079460      740.\n##  6 Asia      Afghanistan  1977    38.4 14880372      786.\n##  7 Asia      Afghanistan  1982    39.9 12881816      978.\n##  8 Asia      Afghanistan  1987    40.8 13867957      852.\n##  9 Asia      Afghanistan  1992    41.7 16317921      649.\n## 10 Asia      Afghanistan  1997    41.8 22227415      635.\n## # ... with 1,694 more rows\nselect(gapminder, starts_with(\"c\"))\n## # A tibble: 1,704 x 2\n##    country     continent\n##    <fct>       <fct>    \n##  1 Afghanistan Asia     \n##  2 Afghanistan Asia     \n##  3 Afghanistan Asia     \n##  4 Afghanistan Asia     \n##  5 Afghanistan Asia     \n##  6 Afghanistan Asia     \n##  7 Afghanistan Asia     \n##  8 Afghanistan Asia     \n##  9 Afghanistan Asia     \n## 10 Afghanistan Asia     \n## # ... with 1,694 more rows\nselect(gapminder, ends_with(\"p\"))\n## # A tibble: 1,704 x 3\n##    lifeExp      pop gdpPercap\n##      <dbl>    <int>     <dbl>\n##  1    28.8  8425333      779.\n##  2    30.3  9240934      821.\n##  3    32.0 10267083      853.\n##  4    34.0 11537966      836.\n##  5    36.1 13079460      740.\n##  6    38.4 14880372      786.\n##  7    39.9 12881816      978.\n##  8    40.8 13867957      852.\n##  9    41.7 16317921      649.\n## 10    41.8 22227415      635.\n## # ... with 1,694 more rows\nselect(gapminder, contains(\"o\"))\n## # A tibble: 1,704 x 3\n##    country     continent      pop\n##    <fct>       <fct>        <int>\n##  1 Afghanistan Asia       8425333\n##  2 Afghanistan Asia       9240934\n##  3 Afghanistan Asia      10267083\n##  4 Afghanistan Asia      11537966\n##  5 Afghanistan Asia      13079460\n##  6 Afghanistan Asia      14880372\n##  7 Afghanistan Asia      12881816\n##  8 Afghanistan Asia      13867957\n##  9 Afghanistan Asia      16317921\n## 10 Afghanistan Asia      22227415\n## # ... with 1,694 more rows\nselect_if(gapminder, is.numeric)\n## # A tibble: 1,704 x 4\n##     year lifeExp      pop gdpPercap\n##    <int>   <dbl>    <int>     <dbl>\n##  1  1952    28.8  8425333      779.\n##  2  1957    30.3  9240934      821.\n##  3  1962    32.0 10267083      853.\n##  4  1967    34.0 11537966      836.\n##  5  1972    36.1 13079460      740.\n##  6  1977    38.4 14880372      786.\n##  7  1982    39.9 12881816      978.\n##  8  1987    40.8 13867957      852.\n##  9  1992    41.7 16317921      649.\n## 10  1997    41.8 22227415      635.\n## # ... with 1,694 more rows"},{"path":"tidy_verse.html","id":"tidy_rename","chapter":" 2 Вступ у Tidyverse","heading":"2.3.4 Зміна назви стовпчиків - rename()","text":"Для зміни назви стовпчиків використовується функція rename(). Синтаксис функції: нова_назва = стара_назва.Замість старої назви можна вказати порядковий номер стовпчика:Змінити назву стовпчика за певною умовою можна за допомогою функції rename_with(). Наприклад, записати всі назви великими літерами:Стовпчики, які починаються на латинську “c” записати великими літерами:Більш складний варіант, але дуже часто вживаний — заміна певного символу або частини в назві. Такі варіанти зустрічаються, коли в назвах стовпчиків зустрічаються зайві “пробіли.” В нашому дата фреймі з цим все добре, але для прикладу замінемо всі “co” на “CO”","code":"\nrename(gapminder, population = pop)\n## # A tibble: 1,704 x 6\n##    country     continent  year lifeExp population gdpPercap\n##    <fct>       <fct>     <int>   <dbl>      <int>     <dbl>\n##  1 Afghanistan Asia       1952    28.8    8425333      779.\n##  2 Afghanistan Asia       1957    30.3    9240934      821.\n##  3 Afghanistan Asia       1962    32.0   10267083      853.\n##  4 Afghanistan Asia       1967    34.0   11537966      836.\n##  5 Afghanistan Asia       1972    36.1   13079460      740.\n##  6 Afghanistan Asia       1977    38.4   14880372      786.\n##  7 Afghanistan Asia       1982    39.9   12881816      978.\n##  8 Afghanistan Asia       1987    40.8   13867957      852.\n##  9 Afghanistan Asia       1992    41.7   16317921      649.\n## 10 Afghanistan Asia       1997    41.8   22227415      635.\n## # ... with 1,694 more rows\nrename(gapminder, population = 5)\n## # A tibble: 1,704 x 6\n##    country     continent  year lifeExp population gdpPercap\n##    <fct>       <fct>     <int>   <dbl>      <int>     <dbl>\n##  1 Afghanistan Asia       1952    28.8    8425333      779.\n##  2 Afghanistan Asia       1957    30.3    9240934      821.\n##  3 Afghanistan Asia       1962    32.0   10267083      853.\n##  4 Afghanistan Asia       1967    34.0   11537966      836.\n##  5 Afghanistan Asia       1972    36.1   13079460      740.\n##  6 Afghanistan Asia       1977    38.4   14880372      786.\n##  7 Afghanistan Asia       1982    39.9   12881816      978.\n##  8 Afghanistan Asia       1987    40.8   13867957      852.\n##  9 Afghanistan Asia       1992    41.7   16317921      649.\n## 10 Afghanistan Asia       1997    41.8   22227415      635.\n## # ... with 1,694 more rows\nrename_with(gapminder, toupper)\n## # A tibble: 1,704 x 6\n##    COUNTRY     CONTINENT  YEAR LIFEEXP      POP GDPPERCAP\n##    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n##  1 Afghanistan Asia       1952    28.8  8425333      779.\n##  2 Afghanistan Asia       1957    30.3  9240934      821.\n##  3 Afghanistan Asia       1962    32.0 10267083      853.\n##  4 Afghanistan Asia       1967    34.0 11537966      836.\n##  5 Afghanistan Asia       1972    36.1 13079460      740.\n##  6 Afghanistan Asia       1977    38.4 14880372      786.\n##  7 Afghanistan Asia       1982    39.9 12881816      978.\n##  8 Afghanistan Asia       1987    40.8 13867957      852.\n##  9 Afghanistan Asia       1992    41.7 16317921      649.\n## 10 Afghanistan Asia       1997    41.8 22227415      635.\n## # ... with 1,694 more rows\nrename_with(gapminder, toupper, starts_with(\"c\"))\n## # A tibble: 1,704 x 6\n##    COUNTRY     CONTINENT  year lifeExp      pop gdpPercap\n##    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n##  1 Afghanistan Asia       1952    28.8  8425333      779.\n##  2 Afghanistan Asia       1957    30.3  9240934      821.\n##  3 Afghanistan Asia       1962    32.0 10267083      853.\n##  4 Afghanistan Asia       1967    34.0 11537966      836.\n##  5 Afghanistan Asia       1972    36.1 13079460      740.\n##  6 Afghanistan Asia       1977    38.4 14880372      786.\n##  7 Afghanistan Asia       1982    39.9 12881816      978.\n##  8 Afghanistan Asia       1987    40.8 13867957      852.\n##  9 Afghanistan Asia       1992    41.7 16317921      649.\n## 10 Afghanistan Asia       1997    41.8 22227415      635.\n## # ... with 1,694 more rows\nrename_with(gapminder, ~ gsub(\"co\", \"CO\", .x))\n## # A tibble: 1,704 x 6\n##    COuntry     COntinent  year lifeExp      pop gdpPercap\n##    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n##  1 Afghanistan Asia       1952    28.8  8425333      779.\n##  2 Afghanistan Asia       1957    30.3  9240934      821.\n##  3 Afghanistan Asia       1962    32.0 10267083      853.\n##  4 Afghanistan Asia       1967    34.0 11537966      836.\n##  5 Afghanistan Asia       1972    36.1 13079460      740.\n##  6 Afghanistan Asia       1977    38.4 14880372      786.\n##  7 Afghanistan Asia       1982    39.9 12881816      978.\n##  8 Afghanistan Asia       1987    40.8 13867957      852.\n##  9 Afghanistan Asia       1992    41.7 16317921      649.\n## 10 Afghanistan Asia       1997    41.8 22227415      635.\n## # ... with 1,694 more rows"},{"path":"tidy_verse.html","id":"tidy_pipe","chapter":" 2 Вступ у Tidyverse","heading":"2.3.5 Використання пайпів - %>%","text":"Пайпи (pipes) — це потужний та зручний інструмент для чіткого опису послідовності операцій. Для пояснення зручності його використання розглянемо два варіанти запису одного і того ж коду. Ті хто працював в Excel зараз згадають весь той біль.Для написання пайпів в RStudio є комбінація клавіш: Ctrl + Shift + mВкладена функція, як в Excel:Той самий код з використанням %>%:Погодьтеся, що другий варіант читається значно легше. Пайп працює наступним чином: він приймає результат виконання попереднього коду та передає його в якості першого аргументу наступній функції, такий собі конвєер. При цьому кожну наступну функцію ми можемо писати з наступного рядка.Взагалі, з приводу оформлення tidy-коду бажано ознайомитися з матеріалами Хедлі Вікема (Wickham 2021)Інколи результат виконання функції необхідно передавати не в перший аргумент наступної функції. В таких випадках можна використовувати крапку (.), щоб визначити, куди ми хочемо вставити результат попередньої функції.Майже весь наступний код я буду писати вже з використанням %>%.","code":"\nrename_with(select_if(filter(gapminder, country == \"Ireland\"), is.numeric), toupper)\n## # A tibble: 12 x 4\n##     YEAR LIFEEXP     POP GDPPERCAP\n##    <int>   <dbl>   <int>     <dbl>\n##  1  1952    66.9 2952156     5210.\n##  2  1957    68.9 2878220     5599.\n##  3  1962    70.3 2830000     6632.\n##  4  1967    71.1 2900100     7656.\n##  5  1972    71.3 3024400     9531.\n##  6  1977    72.0 3271900    11151.\n##  7  1982    73.1 3480000    12618.\n##  8  1987    74.4 3539900    13873.\n##  9  1992    75.5 3557761    17559.\n## 10  1997    76.1 3667233    24522.\n## 11  2002    77.8 3879155    34077.\n## 12  2007    78.9 4109086    40676.\ngapminder %>% \n  filter(country == \"Ireland\") %>% \n  select_if(is.numeric) %>% \n  rename_with(toupper)\n## # A tibble: 12 x 4\n##     YEAR LIFEEXP     POP GDPPERCAP\n##    <int>   <dbl>   <int>     <dbl>\n##  1  1952    66.9 2952156     5210.\n##  2  1957    68.9 2878220     5599.\n##  3  1962    70.3 2830000     6632.\n##  4  1967    71.1 2900100     7656.\n##  5  1972    71.3 3024400     9531.\n##  6  1977    72.0 3271900    11151.\n##  7  1982    73.1 3480000    12618.\n##  8  1987    74.4 3539900    13873.\n##  9  1992    75.5 3557761    17559.\n## 10  1997    76.1 3667233    24522.\n## 11  2002    77.8 3879155    34077.\n## 12  2007    78.9 4109086    40676.\n1:10 %>% {c(min(.), max(.))}\n## [1]  1 10\n\n# або \n\nc(min(1:10), max(1:10))\n## [1]  1 10"},{"path":"tidy_verse.html","id":"tidy_mutate","chapter":" 2 Вступ у Tidyverse","heading":"2.3.6 Створення нових стовпчиків - mutate()","text":"Для створення нових стовпчиків використовується функція mutate(). Вона завжди додає нові стовпчики в кінець дата фрейму.Розрахуємо загальний ВВП країни світу в мільярдах доларів США та додамо ще одну змінну country_group, яка буде характеризувати рівень ВВП країни (більше 250 млрд — високий, менше — нормальний). Для цього перемножимо ВВП на душу населення на кількість населення та поділимо на 1000000000, після чого використаємо функцію if_else (аналог “=ЕСЛИ” з Excel).Звертаю увагу, що останній стовпчик country_group був створений за допомогою попереднього нового стовпчика GDP_billion.Також можна проводити різноманітні маніпуляції з цілою низкою стовпчиків за допомогою функцій across() та (). Наприклад, розрахуємо натуральний логарифм до всіх числових стовпчиків:Або запишемо всі категоріальні змінні з великої літери:Для того, щоб залишити лише “новостворені” стовпчики використовується функція tranmutate():","code":"\ngapminder %>% \n  mutate(GDP_billion = gdpPercap * pop / 10^9,\n         country_group = if_else(GDP_billion > 250, \"hight_gpd\", \"normal_gdp\")) %>% \n  filter(year == 2007)\n## # A tibble: 142 x 8\n##    country     continent  year lifeExp       pop gdpPercap GDP_billion country_group\n##    <fct>       <fct>     <int>   <dbl>     <int>     <dbl>       <dbl> <chr>        \n##  1 Afghanistan Asia       2007    43.8  31889923      975.        31.1 normal_gdp   \n##  2 Albania     Europe     2007    76.4   3600523     5937.        21.4 normal_gdp   \n##  3 Algeria     Africa     2007    72.3  33333216     6223.       207.  normal_gdp   \n##  4 Angola      Africa     2007    42.7  12420476     4797.        59.6 normal_gdp   \n##  5 Argentina   Americas   2007    75.3  40301927    12779.       515.  hight_gpd    \n##  6 Australia   Oceania    2007    81.2  20434176    34435.       704.  hight_gpd    \n##  7 Austria     Europe     2007    79.8   8199783    36126.       296.  hight_gpd    \n##  8 Bahrain     Asia       2007    75.6    708573    29796.        21.1 normal_gdp   \n##  9 Bangladesh  Asia       2007    64.1 150448339     1391.       209.  normal_gdp   \n## 10 Belgium     Europe     2007    79.4  10392226    33693.       350.  hight_gpd    \n## # ... with 132 more rows\ngapminder %>% \n  mutate(across(where(is.numeric), log))\n## # A tibble: 1,704 x 6\n##    country     continent  year lifeExp   pop gdpPercap\n##    <fct>       <fct>     <dbl>   <dbl> <dbl>     <dbl>\n##  1 Afghanistan Asia       7.58    3.36  15.9      6.66\n##  2 Afghanistan Asia       7.58    3.41  16.0      6.71\n##  3 Afghanistan Asia       7.58    3.47  16.1      6.75\n##  4 Afghanistan Asia       7.58    3.53  16.3      6.73\n##  5 Afghanistan Asia       7.59    3.59  16.4      6.61\n##  6 Afghanistan Asia       7.59    3.65  16.5      6.67\n##  7 Afghanistan Asia       7.59    3.69  16.4      6.89\n##  8 Afghanistan Asia       7.59    3.71  16.4      6.75\n##  9 Afghanistan Asia       7.60    3.73  16.6      6.48\n## 10 Afghanistan Asia       7.60    3.73  16.9      6.45\n## # ... with 1,694 more rows\ngapminder %>% \n  mutate(across(where(is.factor), toupper))\n## # A tibble: 1,704 x 6\n##    country     continent  year lifeExp      pop gdpPercap\n##    <chr>       <chr>     <int>   <dbl>    <int>     <dbl>\n##  1 AFGHANISTAN ASIA       1952    28.8  8425333      779.\n##  2 AFGHANISTAN ASIA       1957    30.3  9240934      821.\n##  3 AFGHANISTAN ASIA       1962    32.0 10267083      853.\n##  4 AFGHANISTAN ASIA       1967    34.0 11537966      836.\n##  5 AFGHANISTAN ASIA       1972    36.1 13079460      740.\n##  6 AFGHANISTAN ASIA       1977    38.4 14880372      786.\n##  7 AFGHANISTAN ASIA       1982    39.9 12881816      978.\n##  8 AFGHANISTAN ASIA       1987    40.8 13867957      852.\n##  9 AFGHANISTAN ASIA       1992    41.7 16317921      649.\n## 10 AFGHANISTAN ASIA       1997    41.8 22227415      635.\n## # ... with 1,694 more rows\ngapminder %>% \n  transmute(GDP_billion = gdpPercap * pop / 10^9)\n## # A tibble: 1,704 x 1\n##    GDP_billion\n##          <dbl>\n##  1        6.57\n##  2        7.59\n##  3        8.76\n##  4        9.65\n##  5        9.68\n##  6       11.7 \n##  7       12.6 \n##  8       11.8 \n##  9       10.6 \n## 10       14.1 \n## # ... with 1,694 more rows"},{"path":"tidy_verse.html","id":"tidy_group","chapter":" 2 Вступ у Tidyverse","heading":"2.3.7 Групування та агрегація даних - group_by(), summarise()","text":"Агрегація даних по групам — частовживана задача. Наприклад, коли ми хочемо розрахувати якісь середні значення в середені групи. В dplyr цей процес виконується з використанням двох функцій: групування - group_by() та агрегації - summarise().Згрупуємо дані за континентом та розрахуємо середнє та медіанне значення очікуваної тривалості життя при народженні, а також кількість країн в кожній групі:","code":"\ngapminder %>% \n  filter(year == 2007) %>% \n  group_by(continent) %>% \n  summarise(mean_life = mean(lifeExp),\n            median_life = median(lifeExp),\n            count = n()) %>% \n  arrange(-mean_life)\n## # A tibble: 5 x 4\n##   continent mean_life median_life count\n##   <fct>         <dbl>       <dbl> <int>\n## 1 Oceania        80.7        80.7     2\n## 2 Europe         77.6        78.6    30\n## 3 Americas       73.6        72.9    25\n## 4 Asia           70.7        72.4    33\n## 5 Africa         54.8        52.9    52"},{"path":"tidy_verse.html","id":"r_mark","chapter":" 2 Вступ у Tidyverse","heading":"2.4 Створення звітів: R Markdown","text":"","code":""},{"path":"graphics.html","id":"graphics","chapter":" 3 Візуалізація часових рядів","heading":" 3 Візуалізація часових рядів","text":"text","code":""},{"path":"decomposition.html","id":"decomposition","chapter":" 4 Декомпозиція часових рядів","heading":" 4 Декомпозиція часових рядів","text":"text","code":""},{"path":"features.html","id":"features","chapter":" 5 Аналіз часового ряду","heading":" 5 Аналіз часового ряду","text":"text","code":""},{"path":"toolbox.html","id":"toolbox","chapter":" 6 Інструментарій прогнозування","heading":" 6 Інструментарій прогнозування","text":"text","code":""},{"path":"regression.html","id":"regression","chapter":" 7 Регресійні моделі","heading":" 7 Регресійні моделі","text":"text","code":""},{"path":"expsmooth.html","id":"expsmooth","chapter":" 8 Експоненціальне згладжування","heading":" 8 Експоненціальне згладжування","text":"text","code":""},{"path":"arima.html","id":"arima","chapter":" 9 ARIMA-моделі","heading":" 9 ARIMA-моделі","text":"text","code":""},{"path":"prophet.html","id":"prophet","chapter":" 10 Prophet Facebook","heading":" 10 Prophet Facebook","text":"text","code":""},{"path":"clustering.html","id":"clustering","chapter":" 11 Кластеризація","heading":" 11 Кластеризація","text":"text","code":""},{"path":"references.html","id":"references","chapter":"Література","heading":"Література","text":"text","code":""}]
